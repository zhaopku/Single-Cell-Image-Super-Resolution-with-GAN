import torch
from torch import nn
from torchvision.models.vgg import vgg16


class GeneratorLoss(nn.Module):
	def __init__(self, args):
		super(GeneratorLoss, self).__init__()
		# note that vgg is for RGB image, hence not compatible with gray-scale

		# average over all the pixels in the batch
		self.mse_loss = nn.MSELoss(reduction='elementwise_mean')
		self.tv_loss = TVLoss()

		self.adversarial_weight = args.adversarial_weight

	def forward(self, sr_probs, sr_images, hr_images):
		"""

		:param sr_probs: probability of generated fake image being original, [batch_size]
		:param sr_images: fake image generated by generator, [batch_size, n_channels, height, width]
		:param hr_images: original high resolution image, [batch_size, n_channels, height, width]
		:return:
		"""
		# Adversarial Loss
		adversarial_loss = -torch.mean(torch.sr_probs)
		# mse Loss
		mse_loss = self.mse_loss(sr_images, hr_images)

		# TODO: try TV loss later
		# TV Loss
		# tv_loss = self.tv_loss(sr_images)
		return mse_loss + 0.001 * adversarial_loss

class TVLoss(nn.Module):
	def __init__(self, tv_loss_weight=1):
		super(TVLoss, self).__init__()
		self.tv_loss_weight = tv_loss_weight

	def forward(self, x):
		batch_size = x.size()[0]
		h_x = x.size()[2]
		w_x = x.size()[3]
		count_h = self.tensor_size(x[:, :, 1:, :])
		count_w = self.tensor_size(x[:, :, :, 1:])
		h_tv = torch.pow((x[:, :, 1:, :] - x[:, :, :h_x - 1, :]), 2).sum()
		w_tv = torch.pow((x[:, :, :, 1:] - x[:, :, :, :w_x - 1]), 2).sum()
		return self.tv_loss_weight * 2 * (h_tv / count_h + w_tv / count_w) / batch_size

	@staticmethod
	def tensor_size(t):
		return t.size()[1] * t.size()[2] * t.size()[3]

if __name__ == "__main__":
	g_loss = GeneratorLoss()
	print(g_loss)
